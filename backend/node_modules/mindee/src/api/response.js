"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CropperResponse = exports.PassportResponse = exports.FinancialDocResponse = exports.ReceiptResponse = exports.InvoiceResponse = exports.StandardProductResponse = exports.CustomResponse = exports.Response = void 0;
const documents_1 = require("../documents");
const fields_1 = require("../fields");
/**
 * Base class for all responses.
 */
class Response {
    constructor(params) {
        this.pages = [];
        this.httpResponse = params.httpResponse;
        this.documentType = params.documentType;
        this.inputFile = params.input;
    }
    getPageText(httpDataDocument, pageId) {
        const pageText = new fields_1.FullText();
        if ("ocr" in httpDataDocument &&
            Object.keys(httpDataDocument.ocr).length > 0) {
            pageText.words =
                httpDataDocument.ocr["mvision-v1"].pages[pageId].all_words;
        }
        return pageText;
    }
}
exports.Response = Response;
/**
 * Class for all constructed (API Builder) endpoint responses.
 */
class CustomResponse extends Response {
    constructor(params) {
        super(params);
        if (!params.error) {
            this.formatResponse();
        }
    }
    formatResponse() {
        const httpDataDocument = this.httpResponse.data.document;
        httpDataDocument.inference.pages.forEach((apiPage) => {
            this.pages.push(new documents_1.CustomDocument({
                prediction: apiPage.prediction,
                orientation: apiPage.orientation,
                extras: apiPage.extras,
                inputFile: this.inputFile,
                pageId: apiPage.id,
                documentType: this.documentType,
            }));
        });
        this.document = new documents_1.CustomDocument({
            prediction: httpDataDocument.inference.prediction,
            inputFile: this.inputFile,
            documentType: this.documentType,
            orientation: {},
            extras: {},
        });
    }
}
exports.CustomResponse = CustomResponse;
/**
 * Generic class for all standard (Off-the-Shelf) endpoint responses.
 */
class StandardProductResponse extends Response {
    constructor(documentClass, params) {
        super(params);
        this.documentClass = documentClass;
        if (!params.error) {
            this.formatResponse();
        }
    }
    formatResponse() {
        const httpDataDocument = this.httpResponse.data.document;
        httpDataDocument.inference.pages.forEach((apiPage) => {
            const pageText = this.getPageText(httpDataDocument, apiPage.id);
            this.pages.push(new this.documentClass({
                prediction: apiPage.prediction,
                inputFile: this.inputFile,
                pageId: apiPage.id,
                orientation: apiPage.orientation,
                extras: apiPage.extras,
                fullText: pageText,
            }));
        });
        this.document = new this.documentClass({
            prediction: httpDataDocument.inference.prediction,
            inputFile: this.inputFile,
            orientation: {},
            extras: {},
        });
    }
}
exports.StandardProductResponse = StandardProductResponse;
class InvoiceResponse extends StandardProductResponse {
    constructor(params) {
        super(documents_1.Invoice, params);
    }
}
exports.InvoiceResponse = InvoiceResponse;
class ReceiptResponse extends StandardProductResponse {
    constructor(params) {
        super(documents_1.Receipt, params);
    }
}
exports.ReceiptResponse = ReceiptResponse;
class FinancialDocResponse extends StandardProductResponse {
    constructor(params) {
        super(documents_1.FinancialDocument, params);
    }
}
exports.FinancialDocResponse = FinancialDocResponse;
class PassportResponse extends StandardProductResponse {
    constructor(params) {
        super(documents_1.Passport, params);
    }
}
exports.PassportResponse = PassportResponse;
class CropperResponse extends StandardProductResponse {
    constructor(params) {
        super(documents_1.Cropper, params);
    }
}
exports.CropperResponse = CropperResponse;
