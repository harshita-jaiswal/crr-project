import { Document, Passport, Receipt, Invoice, FinancialDocument, CustomDocument, DocumentConstructorProps, Cropper } from "../documents";
import { FullText } from "../fields";
import { Input } from "../inputs";
export interface ResponseProps {
    httpResponse: any;
    documentType: string;
    input: Input;
    error: boolean;
}
/**
 * Base class for all responses.
 */
export declare class Response<DocType extends Document> {
    httpResponse: any;
    readonly documentType: string;
    inputFile: Input;
    document?: DocType;
    pages: Array<DocType>;
    constructor(params: ResponseProps);
    protected getPageText(httpDataDocument: any, pageId: number): FullText;
}
/**
 * Class for all constructed (API Builder) endpoint responses.
 */
export declare class CustomResponse extends Response<CustomDocument> {
    constructor(params: ResponseProps);
    protected formatResponse(): void;
}
declare type StandardDocumentSig<DocType extends Document> = {
    new ({ prediction, inputFile, pageId, fullText, }: DocumentConstructorProps): DocType;
};
/**
 * Generic class for all standard (Off-the-Shelf) endpoint responses.
 */
export declare class StandardProductResponse<DocType extends Document> extends Response<DocType> {
    documentClass: StandardDocumentSig<DocType>;
    constructor(documentClass: StandardDocumentSig<DocType>, params: ResponseProps);
    protected formatResponse(): void;
}
export declare class InvoiceResponse extends StandardProductResponse<Invoice> {
    constructor(params: ResponseProps);
}
export declare class ReceiptResponse extends StandardProductResponse<Receipt> {
    constructor(params: ResponseProps);
}
export declare class FinancialDocResponse extends StandardProductResponse<FinancialDocument> {
    constructor(params: ResponseProps);
}
export declare class PassportResponse extends StandardProductResponse<Passport> {
    constructor(params: ResponseProps);
}
export declare class CropperResponse extends StandardProductResponse<Cropper> {
    constructor(params: ResponseProps);
}
export {};
