/// <reference types="node" />
import { Input } from "./inputs";
import { Response } from "./api";
import { Document } from "./documents";
import { DocumentConfig, responseSig } from "./documents/documentConfig";
import { ReadStream } from "fs";
declare type DocConfigs = Map<string[], DocumentConfig>;
interface PredictOptions {
    docType?: string;
    username?: string;
    cutPages?: boolean;
    fullText?: boolean;
    cropper?: boolean;
}
declare class DocumentClient {
    inputDoc: Input;
    docConfigs: DocConfigs;
    constructor(inputDoc: Input, docConfigs: DocConfigs);
    parse<RespType extends Response<Document>>(responseClass: responseSig<RespType>, params?: PredictOptions): Promise<RespType>;
    protected getDocType(responseClass: string): string;
}
interface customConfigParams {
    accountName: string;
    documentType: string;
    version?: string;
}
interface ClientOptions {
    apiKey?: string;
    throwOnError?: boolean;
    debug?: boolean;
}
/**
 * Mindee Client
 */
export declare class Client {
    readonly docConfigs: DocConfigs;
    protected apiKey: string;
    /**
     * @param options
     */
    constructor(options?: ClientOptions);
    protected addStandardEndpoints(): void;
    addEndpoint({ accountName, documentType, version, }: customConfigParams): this;
    docFromPath(inputPath: string): DocumentClient;
    docFromBase64(inputString: string, filename: string): DocumentClient;
    docFromStream(inputStream: ReadStream, filename: string): DocumentClient;
    docFromBytes(inputBytes: string, filename: string): DocumentClient;
}
export {};
