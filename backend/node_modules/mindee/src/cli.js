"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = void 0;
const commander_1 = require("commander");
const documents_1 = require("./documents");
const api_1 = require("./api");
const client_1 = require("./client");
const constants_1 = require("./constants");
const program = new commander_1.Command();
const COMMAND_INVOICE = "invoice";
const COMMAND_RECEIPT = "receipt";
const COMMAND_PASSPORT = "passport";
const COMMAND_FINANCIAL = "financial";
const COMMAND_CUSTOM = "custom";
const CLI_COMMAND_CONFIG = new Map([
    [COMMAND_INVOICE, constants_1.ProductConfigs.getByDocType(documents_1.DOC_TYPE_INVOICE)],
    [COMMAND_RECEIPT, constants_1.ProductConfigs.getByDocType(documents_1.DOC_TYPE_RECEIPT)],
    [COMMAND_PASSPORT, constants_1.ProductConfigs.getByDocType(documents_1.DOC_TYPE_PASSPORT)],
    [COMMAND_FINANCIAL, constants_1.ProductConfigs.getByDocType(documents_1.DOC_TYPE_FINANCIAL)],
    [COMMAND_CUSTOM, constants_1.ProductConfigs.getByDocType(documents_1.DOC_TYPE_CUSTOM)],
]);
async function predictCall(command, inputPath, options) {
    const conf = CLI_COMMAND_CONFIG.get(command);
    if (conf === undefined) {
        throw new Error(`Invalid document type ${command}`);
    }
    const mindeeClient = new client_1.Client({
        apiKey: options.apiKey,
        debug: options.debug,
    });
    if (command === COMMAND_CUSTOM) {
        mindeeClient.addEndpoint({
            accountName: options.user,
            documentType: options.documentType,
        });
    }
    const doc = mindeeClient.docFromPath(inputPath);
    const predictParams = {
        docType: command === COMMAND_CUSTOM ? options.documentType : conf.docType,
        username: command === COMMAND_CUSTOM ? options.user : api_1.STANDARD_API_OWNER,
        cutPages: options.cutPages,
        fullText: options.fullText,
    };
    // Tried setting the response by using the responseClass property in constants.PRODUCTS_CONFIG
    // This compiled, but threw an exception:
    //   TypeError: responseType is not a constructor
    //
    // So using a switch to explicitly set the response class parameter. Ugly, but works.
    // Improvements welcome!
    let response;
    switch (command) {
        case COMMAND_INVOICE:
            response = await doc.parse(api_1.InvoiceResponse, predictParams);
            break;
        case COMMAND_RECEIPT:
            response = await doc.parse(api_1.ReceiptResponse, predictParams);
            break;
        case COMMAND_FINANCIAL:
            response = await doc.parse(api_1.FinancialDocResponse, predictParams);
            break;
        case COMMAND_PASSPORT:
            response = await doc.parse(api_1.PassportResponse, predictParams);
            break;
        case COMMAND_CUSTOM:
            response = await doc.parse(api_1.CustomResponse, predictParams);
            break;
        default:
            throw `Unhandled command: ${command}`;
    }
    if (options.fullText) {
        response.pages.forEach((page) => {
            console.log(page.fullText?.toString());
        });
    }
    if (options.pages) {
        response.pages.forEach((page) => {
            console.log(`\n${page}`);
        });
    }
    if (response.document) {
        console.log(`\n${response.document}`);
    }
}
function cli() {
    program.name("mindee");
    program.option("-d, --debug", "high verbosity mode");
    CLI_COMMAND_CONFIG.forEach((info, name) => {
        const prog = program.command(name);
        prog.description(info.description);
        prog.option("-k, --api-key <api_key>", "API key for document endpoint");
        prog.option("-C, --no-cut-pages", "Don't cut document pages");
        prog.option("-p, --pages", "Show pages content");
        if (info.fullText) {
            prog.option("-t, --full-text", "Include full document text in response");
        }
        if (name === COMMAND_CUSTOM) {
            prog.requiredOption("-u, --user <username>", "API account name for the endpoint");
            prog.option("-v, --version <version>", "API account name for the endpoint");
            prog.argument("<endpoint_name>", "API endpoint name");
        }
        prog.argument("<input_path>", "Full path to the file");
        if (name === COMMAND_CUSTOM) {
            prog.action((endpointName, inputPath, options, command) => {
                const allOptions = {
                    ...program.opts(),
                    ...options,
                    documentType: endpointName,
                };
                predictCall(command.name(), inputPath, allOptions);
            });
        }
        else {
            prog.action((inputPath, options, command) => {
                const allOptions = {
                    ...program.opts(),
                    ...options,
                    endpointName: undefined,
                };
                predictCall(command.name(), inputPath, allOptions);
            });
        }
    });
    program.parse(process.argv);
}
exports.cli = cli;
