"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomDocConfig = exports.CropperConfig = exports.PassportConfig = exports.FinancialDocConfig = exports.ReceiptConfig = exports.InvoiceConfig = exports.DocumentConfig = void 0;
const api_1 = require("../api");
const index_1 = require("./index");
const handler_1 = require("../errors/handler");
class DocumentConfig {
    constructor(documentType, endpoints) {
        this.documentType = documentType;
        this.endpoints = endpoints;
    }
    async predictRequest(inputDoc, includeWords, cropping) {
        return await this.endpoints[0].predictRequest(inputDoc, includeWords, cropping);
    }
    buildResult(responseType, inputFile, response) {
        if (response.statusCode > 201) {
            const errorMessage = JSON.stringify(response.data, null, 4);
            handler_1.errorHandler.throw(new Error(`${this.endpoints[0].urlName} API ${response.statusCode} HTTP error: ${errorMessage}`));
            return new responseType({
                httpResponse: response,
                documentType: this.documentType,
                input: inputFile,
                error: true,
            });
        }
        return new responseType({
            httpResponse: response,
            documentType: this.documentType,
            input: inputFile,
            error: false,
        });
    }
    async predict(responseType, params) {
        this.checkApiKeys();
        await params.inputDoc.init();
        await this.cutDocPages(params.inputDoc, params.cutPages);
        const response = await this.predictRequest(params.inputDoc, params.includeWords, params.cropper);
        return this.buildResult(responseType, params.inputDoc, response);
    }
    async cutDocPages(inputDoc, cutPages) {
        if (cutPages && inputDoc.isPdf()) {
            await inputDoc.cutPdf();
        }
    }
    checkApiKeys() {
        this.endpoints.forEach((endpoint) => {
            if (!endpoint.apiKey) {
                throw new Error(`Missing API key for '${endpoint.keyName}', check your Client configuration.
You can set this using the '${api_1.API_KEY_ENVVAR_NAME}' environment variable.\n`);
            }
        });
    }
}
exports.DocumentConfig = DocumentConfig;
class InvoiceConfig extends DocumentConfig {
    constructor(apiKey) {
        const endpoints = [new api_1.InvoiceEndpoint(apiKey)];
        super(index_1.DOC_TYPE_INVOICE, endpoints);
    }
}
exports.InvoiceConfig = InvoiceConfig;
class ReceiptConfig extends DocumentConfig {
    constructor(apiKey) {
        const endpoints = [new api_1.ReceiptEndpoint(apiKey)];
        super(index_1.DOC_TYPE_RECEIPT, endpoints);
    }
}
exports.ReceiptConfig = ReceiptConfig;
class FinancialDocConfig extends DocumentConfig {
    constructor(apiKey) {
        const endpoints = [
            new api_1.InvoiceEndpoint(apiKey),
            new api_1.ReceiptEndpoint(apiKey),
        ];
        super(index_1.DOC_TYPE_FINANCIAL, endpoints);
    }
    async predictRequest(inputDoc, includeWords, cropping) {
        let endpoint;
        if (inputDoc.isPdf()) {
            endpoint = this.endpoints[0];
        }
        else {
            endpoint = this.endpoints[1];
        }
        return await endpoint.predictRequest(inputDoc, includeWords, cropping);
    }
}
exports.FinancialDocConfig = FinancialDocConfig;
class PassportConfig extends DocumentConfig {
    constructor(apiKey) {
        const endpoints = [new api_1.PassportEndpoint(apiKey)];
        super(index_1.DOC_TYPE_PASSPORT, endpoints);
    }
}
exports.PassportConfig = PassportConfig;
class CropperConfig extends DocumentConfig {
    constructor(apiKey) {
        const endpoints = [new api_1.CropperEndpoint(apiKey)];
        super(index_1.DOC_TYPE_CROPPER, endpoints);
    }
}
exports.CropperConfig = CropperConfig;
class CustomDocConfig extends DocumentConfig {
    constructor({ documentType, accountName, version, apiKey, }) {
        const endpoints = [
            new api_1.CustomEndpoint(documentType, accountName, version, apiKey),
        ];
        super(documentType, endpoints);
    }
}
exports.CustomDocConfig = CustomDocConfig;
