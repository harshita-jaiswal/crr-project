"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Receipt_instances, _Receipt_initFromApiPrediction, _Receipt_checklist, _Receipt_taxesMatchTotal, _Receipt_reconstruct, _Receipt_reconstructTotalExclFromTCCAndTaxes, _Receipt_reconstructTotalTax;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Receipt = void 0;
const document_1 = require("./document");
const fields_1 = require("../fields");
class Receipt extends document_1.Document {
    constructor({ prediction, orientation = undefined, extras = undefined, inputFile = undefined, fullText = undefined, pageId = undefined, }) {
        super({ inputFile, pageId, fullText, orientation, extras });
        _Receipt_instances.add(this);
        this.taxes = [];
        this.locale = new fields_1.Locale({
            prediction: prediction.locale,
            pageId: pageId,
        });
        this.totalTax = new fields_1.Amount({
            prediction: { value: undefined, confidence: 0 },
            valueKey: "value",
            pageId: pageId,
        });
        this.totalExcl = new fields_1.Amount({
            prediction: { value: undefined, confidence: 0 },
            valueKey: "value",
            pageId: pageId,
        });
        __classPrivateFieldGet(this, _Receipt_instances, "m", _Receipt_initFromApiPrediction).call(this, prediction, pageId);
        __classPrivateFieldGet(this, _Receipt_instances, "m", _Receipt_checklist).call(this);
        __classPrivateFieldGet(this, _Receipt_instances, "m", _Receipt_reconstruct).call(this);
    }
    toString() {
        const taxes = this.taxes.map((item) => item.toString()).join("\n       ");
        const outStr = `-----Receipt data-----
Filename: ${this.filename}
Total amount including taxes: ${this.totalIncl}
Total amount excluding taxes: ${this.totalExcl}
Date: ${this.date}
Category: ${this.category}
Time: ${this.time}
Merchant name: ${this.merchantName}
Taxes: ${taxes}
Total taxes: ${this.totalTax}
Locale: ${this.locale}
----------------------
`;
        return Receipt.cleanOutString(outStr);
    }
}
exports.Receipt = Receipt;
_Receipt_instances = new WeakSet(), _Receipt_initFromApiPrediction = function _Receipt_initFromApiPrediction(apiPrediction, pageId) {
    this.totalIncl = new fields_1.Amount({
        prediction: apiPrediction.total_incl,
        valueKey: "value",
        pageId: pageId,
    });
    this.date = new fields_1.DateField({
        prediction: apiPrediction.date,
        pageId: pageId,
    });
    this.category = new fields_1.Field({
        prediction: apiPrediction.category,
        pageId: pageId,
    });
    this.merchantName = new fields_1.Field({
        prediction: apiPrediction.supplier,
        pageId: pageId,
    });
    this.time = new fields_1.Field({
        prediction: apiPrediction.time,
        pageId: pageId,
    });
    apiPrediction.taxes.map((taxPrediction) => this.taxes.push(new fields_1.TaxField({
        prediction: taxPrediction,
        pageId: pageId,
        valueKey: "value",
        rateKey: "rate",
        codeKey: "code",
    })));
}, _Receipt_checklist = function _Receipt_checklist() {
    this.checklist = { taxesMatchTotalIncl: __classPrivateFieldGet(this, _Receipt_instances, "m", _Receipt_taxesMatchTotal).call(this) };
}, _Receipt_taxesMatchTotal = function _Receipt_taxesMatchTotal() {
    // Check taxes and total amount exist
    if (this.taxes.length === 0 || this.totalIncl.value === undefined) {
        return false;
    }
    // Reconstruct total_incl from taxes
    let totalVat = 0;
    let reconstructedTotal = 0;
    this.taxes.forEach((tax) => {
        if (tax.value === undefined || !tax.rate)
            return false;
        totalVat += tax.value;
        reconstructedTotal += tax.value + (100 * tax.value) / tax.rate;
    });
    // Sanity check
    if (totalVat <= 0)
        return false;
    // Crate epsilon
    const eps = 1 / (100 * totalVat);
    if (this.totalIncl.value * (1 - eps) - 0.02 <= reconstructedTotal &&
        reconstructedTotal <= this.totalIncl.value * (1 + eps) + 0.02) {
        this.taxes.forEach((tax) => {
            tax.confidence = 1.0;
        });
        this.totalTax.confidence = 1.0;
        this.totalIncl.confidence = 1.0;
        return true;
    }
    return false;
}, _Receipt_reconstruct = function _Receipt_reconstruct() {
    __classPrivateFieldGet(this, _Receipt_instances, "m", _Receipt_reconstructTotalExclFromTCCAndTaxes).call(this);
    __classPrivateFieldGet(this, _Receipt_instances, "m", _Receipt_reconstructTotalTax).call(this);
}, _Receipt_reconstructTotalExclFromTCCAndTaxes = function _Receipt_reconstructTotalExclFromTCCAndTaxes() {
    if (this.taxes.length && this.totalIncl.value !== undefined) {
        const totalExcl = {
            value: this.totalIncl.value - fields_1.Field.arraySum(this.taxes),
            confidence: fields_1.Field.arrayConfidence(this.taxes) *
                this.totalIncl.confidence,
        };
        this.totalExcl = new fields_1.Amount({
            prediction: totalExcl,
            valueKey: "value",
            reconstructed: true,
        });
    }
}, _Receipt_reconstructTotalTax = function _Receipt_reconstructTotalTax() {
    if (this.taxes.length && this.totalTax.value === undefined) {
        const totalTax = {
            value: this.taxes
                .map((tax) => tax.value || 0)
                .reduce((a, b) => a + b, 0),
            confidence: fields_1.Field.arrayConfidence(this.taxes),
        };
        if (totalTax.value > 0)
            this.totalTax = new fields_1.Amount({
                prediction: totalTax,
                valueKey: "value",
                reconstructed: true,
            });
    }
};
