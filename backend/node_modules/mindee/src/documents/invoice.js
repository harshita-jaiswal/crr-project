"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Invoice_instances, _Invoice_initFromApiPrediction, _Invoice_checklist, _Invoice_reconstruct, _Invoice_reconstructTotalTax, _Invoice_reconstructTotalTaxFromTotals, _Invoice_reconstructTotalExcl, _Invoice_reconstructTotalIncl;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invoice = void 0;
const document_1 = require("./document");
const fields_1 = require("../fields");
class Invoice extends document_1.Document {
    constructor({ prediction, orientation = undefined, extras = undefined, inputFile = undefined, fullText = undefined, pageId = undefined, }) {
        super({ inputFile, pageId, fullText, orientation, extras });
        _Invoice_instances.add(this);
        this.companyRegistration = [];
        this.taxes = [];
        this.paymentDetails = [];
        this.customerCompanyRegistration = [];
        __classPrivateFieldGet(this, _Invoice_instances, "m", _Invoice_initFromApiPrediction).call(this, prediction, pageId);
        __classPrivateFieldGet(this, _Invoice_instances, "m", _Invoice_checklist).call(this);
        __classPrivateFieldGet(this, _Invoice_instances, "m", _Invoice_reconstruct).call(this);
    }
    toString() {
        const taxes = this.taxes.map((item) => item.toString()).join("\n       ");
        const paymentDetails = this.paymentDetails
            .map((item) => item.toString())
            .join("\n                 ");
        const customerCompanyRegistration = this.customerCompanyRegistration
            .map((item) => item.toString())
            .join("; ");
        const companyRegistration = this.companyRegistration
            .map((item) => item.toString())
            .join("; ");
        const outStr = `-----Invoice data-----
Filename: ${this.filename}
Invoice number: ${this.invoiceNumber}
Total amount including taxes: ${this.totalIncl}
Total amount excluding taxes: ${this.totalExcl}
Invoice date: ${this.date}
Invoice due date: ${this.dueDate}
Supplier name: ${this.supplier}
Supplier address: ${this.supplierAddress}
Customer name: ${this.customerName}
Customer company registration: ${customerCompanyRegistration}
Customer address: ${this.customerAddress}
Payment details: ${paymentDetails}
Company numbers: ${companyRegistration}
Taxes: ${taxes}
Total taxes: ${this.totalTax}
Locale: ${this.locale}
----------------------
`;
        return Invoice.cleanOutString(outStr);
    }
    taxesMatchTotalIncl() {
        // Check taxes and total include exist
        if (this.taxes.length === 0 || this.totalIncl.value === undefined)
            return false;
        // Reconstruct totalIncl from taxes
        let totalVat = 0;
        let reconstructedTotal = 0;
        this.taxes.forEach((tax) => {
            if (tax.value === undefined || !tax.rate)
                return false;
            totalVat += tax.value;
            reconstructedTotal += tax.value + (100 * tax.value) / tax.rate;
        });
        // Sanity check
        if (totalVat <= 0)
            return false;
        // Crate epsilon
        const eps = 1 / (100 * totalVat);
        if (this.totalIncl.value * (1 - eps) - 0.02 <= reconstructedTotal &&
            reconstructedTotal <= this.totalIncl.value * (1 + eps) + 0.02) {
            this.taxes.forEach((tax) => {
                tax.confidence = 1.0;
            });
            this.totalTax.confidence = 1.0;
            this.totalIncl.confidence = 1.0;
            return true;
        }
        return false;
    }
    /**
     *
     */
    taxesMatchTotalExcl() {
        // Check taxes and total amount exist
        if (this.taxes.length === 0 || this.totalExcl.value === undefined) {
            return false;
        }
        // Reconstruct total_incl from taxes
        let totalVat = 0;
        let reconstructedTotal = 0;
        this.taxes.forEach((tax) => {
            if (tax.value === undefined || !tax.rate) {
                return false;
            }
            totalVat += tax.value;
            reconstructedTotal += (100 * tax.value) / tax.rate;
        });
        // Sanity check
        if (totalVat <= 0)
            return false;
        // Crate epsilon
        const eps = 1 / (100 * totalVat);
        if (this.totalExcl.value * (1 - eps) - 0.02 <= reconstructedTotal &&
            reconstructedTotal <= this.totalExcl.value * (1 + eps) + 0.02) {
            this.taxes.forEach((tax) => {
                tax.confidence = 1.0;
            });
            this.totalTax.confidence = 1.0;
            this.totalExcl.confidence = 1.0;
            return true;
        }
        return false;
    }
    taxesAndTotalExclMatchTotalIncl() {
        if (this.totalExcl.value === undefined ||
            this.taxes.length === 0 ||
            this.totalIncl.value === undefined)
            return false;
        let totalVat = 0;
        this.taxes.forEach((tax) => (totalVat += tax.value || 0));
        const reconstructedTotal = totalVat + this.totalExcl.value;
        if (totalVat <= 0)
            return false;
        if (this.totalIncl.value - 0.01 <= reconstructedTotal &&
            reconstructedTotal <= this.totalIncl.value + 0.01) {
            this.taxes.forEach((tax) => {
                tax.confidence = 1.0;
            });
            this.totalTax.confidence = 1.0;
            this.totalIncl.confidence = 1.0;
            return true;
        }
        return false;
    }
}
exports.Invoice = Invoice;
_Invoice_instances = new WeakSet(), _Invoice_initFromApiPrediction = function _Invoice_initFromApiPrediction(apiPrediction, pageId) {
    this.locale = new fields_1.Locale({
        prediction: apiPrediction.locale,
        valueKey: "language",
    });
    this.documentType = new fields_1.BaseField({
        prediction: apiPrediction.document_type,
        valueKey: "value",
    });
    this.totalIncl = new fields_1.Amount({
        prediction: apiPrediction.total_incl,
        valueKey: "value",
        pageId: pageId,
    });
    this.totalTax = new fields_1.Amount({
        prediction: { value: undefined, confidence: 0.0 },
        valueKey: "value",
        pageId: pageId,
    });
    this.totalExcl = new fields_1.Amount({
        prediction: apiPrediction.total_excl,
        valueKey: "value",
        pageId: pageId,
    });
    this.date = new fields_1.DateField({
        prediction: apiPrediction.date,
        pageId,
    });
    apiPrediction.taxes.map((prediction) => this.taxes.push(new fields_1.TaxField({
        prediction: prediction,
        pageId: pageId,
        valueKey: "value",
        rateKey: "rate",
        codeKey: "code",
    })));
    this.companyRegistration = apiPrediction.company_registration.map(function (prediction) {
        return new fields_1.CompanyRegistration({
            prediction: prediction,
            pageId: pageId,
        });
    });
    this.dueDate = new fields_1.DateField({
        prediction: apiPrediction.due_date,
        pageId: pageId,
    });
    this.invoiceNumber = new fields_1.Field({
        prediction: apiPrediction.invoice_number,
        pageId: pageId,
    });
    this.supplier = new fields_1.Field({
        prediction: apiPrediction.supplier,
        pageId: pageId,
    });
    this.supplierAddress = new fields_1.Field({
        prediction: apiPrediction.supplier_address,
        pageId: pageId,
    });
    this.customerName = new fields_1.Field({
        prediction: apiPrediction.customer,
        pageId: pageId,
    });
    this.customerAddress = new fields_1.Field({
        prediction: apiPrediction.customer_address,
        pageId: pageId,
    });
    apiPrediction.customer_company_registration.map((prediction) => this.customerCompanyRegistration.push(new fields_1.CompanyRegistration({
        prediction: prediction,
        pageId: pageId,
    })));
    apiPrediction.payment_details.map((prediction) => this.paymentDetails.push(new fields_1.PaymentDetails({
        prediction: prediction,
        pageId: pageId,
    })));
}, _Invoice_checklist = function _Invoice_checklist() {
    this.checklist = {
        taxesMatchTotalIncl: this.taxesMatchTotalIncl(),
        taxesMatchTotalExcl: this.taxesMatchTotalExcl(),
        taxesAndTotalExclMatchTotalIncl: this.taxesAndTotalExclMatchTotalIncl(),
    };
}, _Invoice_reconstruct = function _Invoice_reconstruct() {
    __classPrivateFieldGet(this, _Invoice_instances, "m", _Invoice_reconstructTotalTax).call(this);
    __classPrivateFieldGet(this, _Invoice_instances, "m", _Invoice_reconstructTotalExcl).call(this);
    __classPrivateFieldGet(this, _Invoice_instances, "m", _Invoice_reconstructTotalIncl).call(this);
    __classPrivateFieldGet(this, _Invoice_instances, "m", _Invoice_reconstructTotalTaxFromTotals).call(this);
}, _Invoice_reconstructTotalTax = function _Invoice_reconstructTotalTax() {
    if (this.taxes.length > 0) {
        const totalTax = {
            value: this.taxes.reduce((acc, tax) => {
                return tax.value !== undefined ? acc + tax.value : acc;
            }, 0),
            confidence: fields_1.Field.arrayConfidence(this.taxes),
        };
        if (totalTax.value > 0)
            this.totalTax = new fields_1.Amount({
                prediction: totalTax,
                valueKey: "value",
                reconstructed: true,
            });
    }
}, _Invoice_reconstructTotalTaxFromTotals = function _Invoice_reconstructTotalTaxFromTotals() {
    if (this.totalTax.value !== undefined ||
        this.totalExcl.value === undefined ||
        this.totalIncl.value === undefined) {
        return;
    }
    const totalTax = {
        value: this.totalIncl.value - this.totalExcl.value,
        confidence: this.totalIncl.confidence * this.totalExcl.confidence,
    };
    if (totalTax.value >= 0) {
        this.totalTax = new fields_1.Amount({
            prediction: totalTax,
            valueKey: "value",
            reconstructed: true,
        });
    }
}, _Invoice_reconstructTotalExcl = function _Invoice_reconstructTotalExcl() {
    if (this.totalIncl.value === undefined ||
        this.taxes.length === 0 ||
        this.totalExcl.value !== undefined) {
        return;
    }
    const totalExcl = {
        value: this.totalIncl.value - fields_1.Field.arraySum(this.taxes),
        confidence: fields_1.Field.arrayConfidence(this.taxes) *
            this.totalIncl.confidence,
    };
    this.totalExcl = new fields_1.Amount({
        prediction: totalExcl,
        valueKey: "value",
        reconstructed: true,
    });
}, _Invoice_reconstructTotalIncl = function _Invoice_reconstructTotalIncl() {
    if (!(this.totalExcl.value === undefined ||
        this.taxes.length === 0 ||
        this.totalIncl.value !== undefined)) {
        const totalIncl = {
            value: this.totalExcl.value +
                this.taxes.reduce((acc, tax) => {
                    return tax.value ? acc + tax.value : acc;
                }, 0.0),
            confidence: fields_1.Field.arrayConfidence(this.taxes) * this.totalExcl.confidence,
        };
        this.totalIncl = new fields_1.Amount({
            prediction: totalIncl,
            valueKey: "value",
            reconstructed: true,
        });
    }
};
