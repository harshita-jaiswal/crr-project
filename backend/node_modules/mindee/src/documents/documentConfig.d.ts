import { Input } from "../inputs";
import { Response, Endpoint } from "../api";
import { Document } from "./index";
import { ResponseProps } from "../api/response";
interface CustomDocConstructor {
    documentType: string;
    accountName: string;
    version: string;
    apiKey: string;
}
export declare type responseSig<RespType extends Response<Document>> = {
    new ({ httpResponse, documentType, input, error }: ResponseProps): RespType;
};
export declare class DocumentConfig {
    readonly documentType: string;
    readonly endpoints: Array<Endpoint>;
    constructor(documentType: string, endpoints: Array<Endpoint>);
    predictRequest(inputDoc: Input, includeWords: boolean, cropping: boolean): Promise<unknown>;
    buildResult<RespType extends Response<Document>>(responseType: responseSig<RespType>, inputFile: Input, response: any): RespType;
    predict<RespType extends Response<Document>>(responseType: responseSig<RespType>, params: {
        inputDoc: Input;
        includeWords: boolean;
        cutPages: boolean;
        cropper: boolean;
    }): Promise<RespType>;
    cutDocPages(inputDoc: Input, cutPages: boolean): Promise<void>;
    protected checkApiKeys(): void;
}
export declare class InvoiceConfig extends DocumentConfig {
    constructor(apiKey: string);
}
export declare class ReceiptConfig extends DocumentConfig {
    constructor(apiKey: string);
}
export declare class FinancialDocConfig extends DocumentConfig {
    constructor(apiKey: string);
    predictRequest(inputDoc: Input, includeWords: boolean, cropping: boolean): Promise<unknown>;
}
export declare class PassportConfig extends DocumentConfig {
    constructor(apiKey: string);
}
export declare class CropperConfig extends DocumentConfig {
    constructor(apiKey: string);
}
export declare class CustomDocConfig extends DocumentConfig {
    constructor({ documentType, accountName, version, apiKey, }: CustomDocConstructor);
}
export {};
